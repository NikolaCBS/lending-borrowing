
//! Autogenerated weights for `lending_borrowing`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-SJ5M84V`, CPU: `AMD Ryzen 7 5825U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// target/release/framenode
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// lending_borrowing
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create_pool() -> Weight;
	fn lend() -> Weight;
	fn borrow() -> Weight;
	fn repay() -> Weight;
	fn withdraw() -> Weight;
}


/// Weight functions for `lending_borrowing`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing AuthorityAccount (r:1 w:0)
	/// Proof Skipped: LendingBorrowing AuthorityAccount (max_values: Some(1), max_size: None, mode: Measured)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3264`
		// Minimum execution time: 12_383 nanoseconds.
		Weight::from_parts(12_694_000, 3264)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	fn lend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `685`
		//  Estimated: `11526`
		// Minimum execution time: 46_638 nanoseconds.
		Weight::from_parts(47_319_000, 11526)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `925`
		//  Estimated: `12006`
		// Minimum execution time: 55_404 nanoseconds.
		Weight::from_parts(56_225_000, 12006)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1117`
		//  Estimated: `12390`
		// Minimum execution time: 46_677 nanoseconds.
		Weight::from_parts(49_523_000, 12390)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1083`
		//  Estimated: `12322`
		// Minimum execution time: 43_471 nanoseconds.
		Weight::from_parts(46_146_000, 12322)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}


impl WeightInfo for () {
/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing AuthorityAccount (r:1 w:0)
	/// Proof Skipped: LendingBorrowing AuthorityAccount (max_values: Some(1), max_size: None, mode: Measured)
	fn create_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3264`
		// Minimum execution time: 12_383 nanoseconds.
		Weight::from_parts(12_694_000, 3264)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	fn lend() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `685`
		//  Estimated: `11526`
		// Minimum execution time: 46_638 nanoseconds.
		Weight::from_parts(47_319_000, 11526)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	fn borrow() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `925`
		//  Estimated: `12006`
		// Minimum execution time: 55_404 nanoseconds.
		Weight::from_parts(56_225_000, 12006)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn repay() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1117`
		//  Estimated: `12390`
		// Minimum execution time: 46_677 nanoseconds.
		Weight::from_parts(49_523_000, 12390)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: LendingBorrowing UserInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing UserInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: LendingBorrowing PoolInfo (r:1 w:1)
	/// Proof Skipped: LendingBorrowing PoolInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1083`
		//  Estimated: `12322`
		// Minimum execution time: 43_471 nanoseconds.
		Weight::from_parts(46_146_000, 12322)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}